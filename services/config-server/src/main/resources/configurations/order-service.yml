spring:
  datasource:
    url: jdbc:postgresql://localhost:5433/order
    username: postgres
    password: 123
    driver-class-name: org.postgresql.Driver
  kafka:
    producer:
      bootstrap-servers: localhost:9092
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
      properties:
        spring.json.type.mapping: orderConfirmation:com.ecommerce.order.kafka.OrderConfirmation
  jpa:
    hibernate:
      ddl-auto: validate # once the tables are created,change this to validate
    database: postgresql
    database-platform: org.hibernate.dialect.PostgreSQLDialect
#  flyway:
#    baseline-on-migrate: true
#    enabled: true
#    baseline-description: "init"
#    baseline-version: 0
#    user: ${spring.datasource.username}
#    password: ${spring.datasource.password}

server:
  port: 8070

application:
  config:
    customer-url: http://localhost:8222/api/v1/customers
    product-url: http://localhost:8222/api/v1/products
    payment-url: http://localhost:8222/api/v1/payments
    #this is the address of api-gateway
    # why use api-gateway?
    # we might have to run multiple instances of product-service for load balancing and fault tolerance,then api-gateway
    # will route the request to one of the instances of product-service

# enable logging for debugging
logging:
  level:
    com.ecommerce.order.product.ProductClient: DEBUG
    com.ecommerce.order.customer.CustomerClient: DEBUG
    com.ecommerce.order.payment.PaymentClient: DEBUG
    org.springframework.cloud.openfeign: DEBUG