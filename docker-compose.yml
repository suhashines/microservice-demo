services:
  postgres:
    container_name: ms_pg_sql
    image: postgres:15.1-alpine
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: 123
      PGDATA: /var/lib/postgresql/data
    volumes:
      - postgres:/var/lib/postgresql/data
    ports:
      - 5433:5432
    networks:
      - microservices-net
    restart: unless-stopped

  mongodb:
    image: mongo:latest
    container_name: ms_mongodb
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: mongo
      MONGO_INITDB_ROOT_PASSWORD: 123
      MONGO_INITDB_DATABASE: admin
    volumes:
      - mongo:/data
      - ./mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    ports:
      - 27017:27017
    networks:
      - microservices-net

  mail-dev: # a dummy smtp server for development and testing
    container_name: ms_mail_dev
    image: maildev/maildev
    ports:
      - 1080:1080 # ui port
      - 1025:1025 # smtp server port
    networks:
      - microservices-net

  kafka:
    image: bitnami/kafka:latest
    container_name: ms_kafka
    environment:
      # Unique node ID for KRaft
      KAFKA_CFG_NODE_ID: 1
      # Define roles
      KAFKA_CFG_PROCESS_ROLES: broker,controller
      # Listeners for clients and internal controller
      KAFKA_CFG_LISTENERS: PLAINTEXT://:9092,CONTROLLER://:9093
      KAFKA_CFG_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,CONTROLLER:PLAINTEXT
      KAFKA_CFG_CONTROLLER_LISTENER_NAMES: CONTROLLER
      # Single-node controller quorum
      KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: 1@kafka:9093
      KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_CFG_NUM_PARTITIONS: 1
      ALLOW_PLAINTEXT_LISTENER: "yes"
    ports:
      - "9092:9092"
    networks:
      - microservices-net
  zipkin:
    image: openzipkin/zipkin
    container_name: ms_zipkin
    ports:
      - "9411:9411"
    networks:
      - microservices-net
networks:
  microservices-net:
    driver: bridge

volumes:
  postgres:
  mongo:
